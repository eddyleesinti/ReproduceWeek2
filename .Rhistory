a <- available.packages
a
a()
a <- available.packages()
a
head(rownames(a),3)
install.packages('slidify')
source('http://bioconductor.org/'
)
source('http://bioconductor.org/')
source('http://bioconductor.org/biocLite.R')
biocLITE(c('GenomicFeatures','AnnotatinDBI'))
biocLite(c('GenomicFeatures','AnnotatinDBI'))
install.packages('kernsmooth')
install.packages('KERNSMOOTH')
install.packages('KernSmooth')
library(KernSmooth)
q()
1+1
return (v)
{
{
q
q()
/
myFunction(v)
myFunction()
myFunction(t)
myFunction(v)
return (myv)
return(myv)
{
return(myv)
}
myFunction()
return(myV)
return(V)
myF <- function(V)
{
return(V)
}
myF()
myF(V)
myF1 <- function(V)
{
return(V)
}
myF1 <- function(V)
{
return(V)
}
myF1 <- function(v))
{
uniqueValues = unique(v)
uniqueCounts = tabulate(v)
return(v)
}
myF1 <- function(v)
myF1 <- function(v)
{
uniqueValues = unique(v)
uniqueCounts = tabulate(v)
return(v)
}
myF1()
myF1(v)
v = c(1,2,3,4)
myF1(v)
myF1 <- function(v)
{
uniqueValues = unique(v)
uniqueCounts = tabulate(v)
return(v)
}
myF1(v)
tabulate(v)
unique(v)
install.packages("modeest")
library("modeest", lib.loc="~/R/win-library/3.2")
mfv(v)
v
v = c(v,4)
v
v = c(v,4)
mfv(v)
mfv
available.packages()
choose(10,1)
choose(10,2)
rbinom(n = 10,size = 1,prob = 0.5)
rbinom(n = 10,size = 1,prob = 0.5)
data <- 1:45
sample(data, 45)
sample(data, 46)
sample(data)
diff(data)
length(diff(data))
seq(from=-3, to=3, length.out = 1-)
seq(from=-3, to=3, length.out = 10)
plot(seq(from=-3, to=3, length.out = 10))
g1 <- seq(from=-3, to=3, length.out = 10)
plot(g1'')
plot(g1)
plot(g1, dnorm(g1))
plot(g1
)
plot
?plot
plot(g1)
plot(x=g1)
plot(y=g1)
plot(x=g1)
plot(x=g1, y=g1)
plot(x=g1, y=dnorm(g1)
)
g2 <- rep(from=-10, to=20
)
g2 <- seq(from=-10, to=20, length.out = 100)
g2
plot(g2)
plot(g2, dbinom(g2))
plot(g2, dbinom(g2, 5))
plot(g2, dbinom(g2, 5, prob=0.1))
plot(g2, dbinom(g2, 5, prob=0.2))
plot(g2, dbinom(g2, 5, prob=0.3))
plot(g2, dbinom(g2, 5, prob=0.4))
plot(g2, dbinom(g2, 5, prob=c(0.4,0.6))
)
plot(g2, dbinom(g2, 5, prob=c(0.4,0.6,0.8))
plot(g2, dpois(g2,0.1))
plot(g2, dpois(g2,0.1))
plot(g2, dpois(g2,0.5))
warnings()
library(xtabke)
library(xtable)
install.packages("xtable")
install.packages(xtable)
install.packages("xtable")
setwd("c:/github/ReproduceWeek2")
ls()
list.files()
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data
head(data)
table(data$steps)
sum(is.na(data))
head(data)
head(data, 100)
head(data, 200)
head(data, 300)
source('~/.active-rstudio-document', echo=TRUE)
head(data, 300)
length(data)
nrow(data)
hist(data)
hist(data$steps)
library(ggplot2)
ggplot(data = data, aes(date, steps))
hist(data$steps)
ggplot(data = data, aes(steps))
g1 <- ggplot(data = data, aes(steps))
g1 + geom_bar()
tapply(data, data$date, c(mean, median))
tapply(data, data$date, mean)
tapply(data, data$date, median)
tapply(data, data$date, sum)
tapply(data$steps, data$date, sum)
tapply(data$steps, data$date, c(median))
tapply(data$steps, data$date, mean)
data.frame(mean=tapply(data$steps, data$date, mean), median=tapply(data$steps, data$date, mean))
? mean
mean(data$steps)
mean(data$steps, na.rm=TRUE)
data2 <- data.frame(mean=tapply(data$steps, data$date, mean, na.rm=T), median=tapply(data$steps, data$date, median, na.rm=T))
data2
data2 <- data.frame(mean=tapply(data$steps, data$date, mean, na.rm=TRUE), median=tapply(data$steps, data$date, median, na.rm=TRUE))
data2
data2 <- data.frame(mean=tapply(data$steps, data$date, mean, na.rm=TRUE), median=tapply(data$steps, data$date, median, na.rm=TRUE))
is.na(data$date)
sum(is.na(data$date))
sum(is.na(data$steps))
data$Date <- as.Date(data$Date, "%Y-%m-%d")
str(data$Date)
data$Date)
data$Date
data$date
data$date <- as.Date(data$date, "%Y-%m-%d")
str(data)
steps.by.date <- with(data, aggregate(steps ~ date))
steps.by.date <- with(data, aggregate(steps ~ date, FUN=sum))
steps.by.date
ggplot(data = steps.by.date, aes(date, steps))
ggplot(data = steps.by.date, aes(date, steps)) + geom_bar()
ggplot(data = steps.by.date, aes(date, steps)) + geom_histogram()
ggplot(data = steps.by.date, aes(date, steps)) + geom_bar(stat="identity")
ggplot(data = steps.by.date, aes(date)) + geom_bar()
ggplot(data = steps.by.date, aes(steps)) + geom_bar()
hist(x = steps.by.date$date)
hist(x = steps.by.date$date, breaks=10)
hist(x = steps.by.date$steps, breaks=10)
data.median <- with(data, tapply(steps, median, na.rm=TRUE))
data.median <- with(data, tapply(steps, date, median, na.rm=TRUE))
table(data.median)
data.median <- with(data, tapply(steps, date, median, na.rm=TRUE))
data.mean <- with(data, tapply(steps, date, mean, na.rm=TRUE))
data.mean
data[data$date="2012-10-08"]
data[data$date=="2012-10-08"]
data[data$date=="2012-10-08",]
steps.by.date.mean <- with(data, aggregate(steps ~ date, FUN=mean))
steps.by.date.mean
steps.by.date.median <- with(data, aggregate(steps ~ date, FUN=median))
steps.by.date.median
steps.by.date.mean
steps.by.date.median <- with(data, aggregate(steps ~ date, FUN=median))
steps.by.date.median
? aggregate
data.median <- with(data, tapply(steps, date, median, na.rm=TRUE))
data.mean <- with(data, tapply(steps, date, mean, na.rm=TRUE))
data.median
data.median <- with(data, tapply(steps, date, median, na.rm=TRUE))
data.median
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
data.median
data.mean
? median
median(1:4)
data
str(data)
median(data[data$date=="2012-10-12"])
median(data[data$date=="2012-10-12"],)
median(data[data$date=="2012-10-12",])
median(data[data$date=="2012-10-12",], na.rm=TRUE)
median(data[data$date=="2012-10-12",]$syeps, na.rm=TRUE)
median(data[data$date=="2012-10-12",]$steps, na.rm=TRUE)
median(data[data$date=="2012-10-11",]$steps, na.rm=TRUE)
median.steps.by.date <- median(steps.by.date$steps, na.rm=T)
mean.steps.by.date <- mean(steps.by.date$steps, na.rm=T)
mean.steps.by.date
steps.by.interval.sum <- with(data, aggreate(steps~interval, FUN=mean))mean
steps.by.interval.sum <- with(data, aggreate(steps~interval, FUN=mean))
steps.by.interval.sum <- with(data, aggregate(steps~interval, FUN=mean))
steps.by.interval.sum
ggplot(steps.by.interval.sum,aes(interval, steps)) + geom_line()
steps.by.interval.sum <- with(data, aggreate(steps~interval, FUN=mean))
steps.by.interval.mean <- with(data, aggreate(steps~interval, FUN=mean))
ggplot(steps.by.interval.mean,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval")
steps.by.interval.mean <- with(data, aggreate(steps~interval, FUN=mean))
steps.by.interval.mean <- with(data, aggregate(steps~interval, FUN=mean))
ggplot(steps.by.interval.mean,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval")
steps.by.interval.mean[which.max(steps.by.interval.mean),]
str(steps.by.interval.mean)
steps.by.interval.mean[which.max(steps.by.interval.mean$steps),]
steps.by.interval.mean[which.max(steps.by.interval.mean$steps),, rownames=null]
steps.by.interval.mean[which.max(steps.by.interval.mean$steps),, rownames=FALSE]
steps.by.interval.mean[which.max(steps.by.interval.mean$steps),]
data[is.na(data)]
table(data[is.na(data)])
sum(data[is.na(data)])
sum(data[is.na(data),])
sum(data[is.na(data$steps),])
sum(data[is.na(data$steps),]$steps)
sum(is.na(data$steps))
table(is.na(data$steps))
data[is.na(data$steps)]
data[is.na(data$steps),]
data[is.na(data$steps)==FALSE,]
data[is.na(data$steps)\,]
data[is.na(data$steps),]
table(data[is.na(data$steps),]$steps)
summary(data[is.na(data$steps),])
data$steps[is.na(data$steps),]
is.na(data$steps)]
is.na(data$steps)
? where
data[is.na(data$steps),]
table(data[is.na(data$steps),])
table(data[is.na(data$steps),]$date)
data[is.na(data$steps),] <- mean.steps.by.date
mean.steps.by.date
median.steps.by.date
data[is.na(data$steps),steps] <- mean.steps.by.date
data[is.na(data$steps),c("steps")] <- mean.steps.by.date
table(data)
sum(is.na(data))
head(weekday(data$date))
head(weekdays(data$date))
data$weekend == weekdays(data$date) %in% c("Saturday","Sunday")
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
table(data$weekend)
par(mfrow=c(1,2))
subset(data,subset = "data$weekend==TRUE")
subset(data,subset = data$weekend==TRUE)
data$weekend == weekdays(data$date) %in% c("Saturday","Sunday")
par(mfrow=c(1,2))
data.weekend <- subset(data,subset=data$weekend==TRUE)
data.weekday <- subset(data,subset=data$weekend==FALSE)
steps.by.interval.mean.weekend <- with(data.weekend, aggregate(steps~interval, FUN=mean))
steps.by.interval.mean.weekday <- with(data.weekday, aggregate(steps~interval, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekend)")
ggplot(steps.by.interval.mean.weekday,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekday)")
data$weekend == weekdays(data$date) %in% c("Saturday","Sunday")
data.weekend <- subset(data,subset=data$weekend==TRUE)
data.weekday <- subset(data,subset=data$weekend==FALSE)
steps.by.interval.mean.weekend <- with(data.weekend, aggregate(steps~interval, FUN=mean))
steps.by.interval.mean.weekday <- with(data.weekday, aggregate(steps~interval, FUN=mean))
par(mfrow=c(1,2))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekend)")
ggplot(steps.by.interval.mean.weekday,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekday)")
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
data.weekend <- subset(data,subset=data$weekend==TRUE)
data.weekday <- subset(data,subset=data$weekend==FALSE)
steps.by.interval.mean.weekend <- with(data.weekend, aggregate(steps~interval, FUN=mean))
steps.by.interval.mean.weekday <- with(data.weekday, aggregate(steps~interval, FUN=mean))
par(mfrow=c(1,2))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekend)")
ggplot(steps.by.interval.mean.weekday,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekday)")
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
data.weekend <- subset(data,subset=data$weekend==TRUE)
data.weekday <- subset(data,subset=data$weekend==FALSE)
steps.by.interval.mean.weekend <- with(data.weekend, aggregate(steps~interval, FUN=mean))
steps.by.interval.mean.weekday <- with(data.weekday, aggregate(steps~interval, FUN=mean))
par(mfrow=c(1,2))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekend)")
ggplot(steps.by.interval.mean.weekday,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval (Weekday)")
steps.by.interval.mean.weekend <- with(data.weekend, aggregate(steps~weekend + interval, FUN=mean))
steps.by.interval.mean.weekend
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval") + facet_grid(.~weekend)
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
steps.by.interval.mean.weekend <- with(data.weekend, aggregate(steps~weekend + interval, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval") + facet_grid(.~weekend)
table(steps.by.interval.mean.weekend )
table(steps.by.interval.mean.weekend$weekend)
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
steps.by.interval.mean.weekend <- with(data$weekend, aggregate(steps~weekend + interval, FUN=mean))
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
steps.by.interval.mean.weekend <- with(data, aggregate(steps~weekend + interval, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval") + facet_grid(.~weekend)
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
steps.by.interval.mean[which.max(steps.by.interval.mean),]
steps.by.interval.mean[which.max(steps.by.interval.mean$steps),]
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
steps.by.interval.mean.weekend <- with(data, aggregate(steps~interval + weekend, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
steps.by.interval.mean.weekend <- with(data, aggregate(steps~interval, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
str(steps.by.interval.mean.weekend)
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
steps.by.interval.mean.weekend <- with(data, aggregate(steps~weekend, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
table(data$weekend)
data[data$weekend,]
data[data$weekend,c("weekend")]
data[data$weekend,c("weekend")] <- "WEEKEND"
table(data$weekend)
steps.by.interval.mean.weekend <- with(data, aggregate(steps~interval + weekend, FUN=mean))
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval")
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + title(main = "Average Steps By Time Interval")
data.weekend <-subset(data, weekend)
data.weekday <-subset(data, !weekend)
data.weekend <-subset(data, weekend==TRUE)
data.weekday <-subset(data, !weekend)
data.weekend <-subset(data, weekend==TRUE)
data.weekday <-subset(data, weekend==FALSE)
data$weekend <- weekdays(data$date) %in% c("Saturday","Sunday")
data.weekend <-subset(data, weekend==TRUE)
data.weekday <-subset(data, weekend==FALSE)
data.weekend.mean <- aggregate(steps ~ interval, data.weekend, mean,na.rm=TRUE)
data.weekend.mean$weekend <- "WEEKEND"
data.weekday.mean <- aggregate(steps ~ interval, data.weekday, mean,na.rm=TRUE)
data.weekday.mean$weekend <- "WEEKDAY"
data.weekend.weekday <- rbind(data.weekend.mean, data.weekend.mean)
str(data.weekend.weekday)
ggplot(steps.by.interval.mean.weekend,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
data.weekend.weekday <- null
data.weekend.weekday <- NULL
data.weekend.weekday <- rbind(data.weekend.mean, data.weekday.mean)
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(.~weekend)+ title(main = "Average Steps By Time Interval")
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(~weekend)+ title(main = "Average Steps By Time Interval")
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
data.weekend.weekday <- aggregate (data, steps ~ interval + weekend ,  FUN = mean)
data.weekend.weekday <- with(data, aggregate(steps ~ interval + weekend ,  FUN = mean))
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(~weekend)+ title(main = "Average Steps By Time Interval")
levels(data.weekend.weekday) <- c("WEEKEND", "WEEKDAY")
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(~weekend)+ title(main = "Average Steps By Time Interval")
data.weekend.weekday <- with(data, aggregate(steps ~ interval + weekend ,  FUN = mean))
data.weekend.weekday <- factor(data.weekend.weekday<- c("WEEKEND", "WEEKDAY"))
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(~weekend)+ title(main = "Average Steps By Time Interval")
data.weekend.weekday <- as.factor(data.weekend.weekday<- c("WEEKEND", "WEEKDAY"))
ggplot(data.weekend.weekday,aes(interval, steps)) + geom_line() + facet_grid(~weekend)+ title(main = "Average Steps By Time Interval")
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
mean.steps.by.date
source('C:/github/ReproduceWeek2/code.R', echo=TRUE)
